function solution(p) {
  let minDistance = Infinity;
  for (let i = 0; i < p.length; i++) {
    for (let j = i + 1; j < p.length; j++) {
      const x1 = p[i][0];
      const y1 = p[i][1];
      const x2 = p[j][0];
      const y2 = p[j][1];
      const distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
      minDistance = Math.min(minDistance, distance);
    }
  }
  return minDistance;
}
Ecuación de la recta
Este problema se trata de encontrar la distancia Euclidiana mínima entre dos puntos diferentes en un conjunto de puntos dados en un plano cartesiano.

Para resolver este problema, podemos utilizar un enfoque de fuerza bruta que calcule la distancia Euclidiana entre cada par de puntos en el conjunto de puntos y devuelva la distancia mínima. La distancia Euclidiana entre dos puntos (x1, y1) y (x2, y2) se puede calcular de la siguiente manera:
La variable minDistance se inicializa en Infinity para asegurarse de que la primera distancia calculada sea menor que el mínimo actual. Luego utilizamos dos bucles anidados para iterar a través de cada par de puntos en el conjunto de puntos.
 Calculamos la distancia Euclidiana entre cada par de puntos utilizando la fórmula anterior, y actualizamos la variable minDistance si la nueva distancia es menor que la mínima actual. Finalmente, devolvemos la minDistance.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function solution(sequence) {
    const stack = [];
    const openingBrackets = new Set(['(', '[', '{']);
    const closingBrackets = new Map([
        [')', '('],
        [']', '['],
        ['}', '{']
    ]);
    for (const char of sequence) {
        if (openingBrackets.has(char)) {
            stack.push(char);
        } else if (closingBrackets.has(char)) {
            const openingBracket = closingBrackets.get(char);
            if (stack.length === 0 || stack.pop() !== openingBracket) {
                return false;
            }
        }
    }
    return stack.length === 0;
}
Este código de JavaScript determina si una secuencia de paréntesis dada es una secuencia válida de paréntesis. Para hacerlo, utiliza una estructura de datos llamada "pila".

La idea es iterar a través de la cadena de paréntesis y agregar cada paréntesis de apertura a la pila. Cuando se encuentra un paréntesis de cierre, se saca el elemento superior de la pila y se verifica si coincide con el paréntesis de cierre actual. Si no coincide o si la pila está vacía cuando se encuentra un paréntesis de cierre, entonces la cadena no es una secuencia válida de paréntesis.
Primero, se crea una pila vacía y se define un conjunto de paréntesis de apertura y un mapa de paréntesis de cierre. Luego, se itera a través de cada carácter en la secuencia y se comprueba si es un paréntesis de apertura o de cierre. Si es un paréntesis de apertura, se agrega a la pila. Si es un paréntesis de cierre, se verifica si el elemento superior de la pila coincide con el paréntesis de apertura correspondiente. Si coincide, se saca el elemento de la pila. Si no coincide o si la pila está vacía, entonces la secuencia no es válida.

Finalmente, después de iterar a través de la cadena completa, si la pila está vacía, entonces la secuencia es válida. Si la pila no está vacía, entonces hay paréntesis de apertura sin pareja, y la secuencia no es válida.